name: Auto Tag + Publish to PyPI for pyut-reporter package

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for versioning and tag history

      - name: Get latest version tag
        id: get_latest_tag
        run: |
          tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.1")
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Get commit message
        id: commit
        run: |
          message=$(git log -1 --pretty=%B)
          echo "Commit message: $message"
          echo "message=$message" >> $GITHUB_OUTPUT

      - name: Bump version based on commit message
        id: bump
        run: |
          version="${{ steps.get_latest_tag.outputs.tag }}"
          version="${version#v}"

          IFS='.' read -r major minor patch <<< "$version"

          message="${{ steps.commit.outputs.message }}"

          if [[ "$message" == \[MAJOR\]* ]]; then
            major=$((major + 1)); minor=0; patch=0
          elif [[ "$message" == \[MINOR\]* ]]; then
            minor=$((minor + 1)); patch=0
          elif [[ "$message" == \[PATCH\]* ]]; then
            patch=$((patch + 1))
          else
            echo "❌ Commit message must start with [MAJOR], [MINOR], or [PATCH]"
            exit 1
          fi
          new_tag="v$major.$minor.$patch"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Create and push Git tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.bump.outputs.new_tag }}
          git push origin ${{ steps.bump.outputs.new_tag }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build the package
        run: python -m build

      - name: Upload to PyPI
        run: twine upload dist/* --verbose
